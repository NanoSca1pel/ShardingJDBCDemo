spring:
  shardingsphere:
    datasource:
      names: ds1,ds2,m0,s0  # 配置数据源，给数据源起名称
      ds1:  #配置数据源具体内容，包含连接池，驱动，地址，用户名和密码
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
        username: root
        password: 123456
      ds2:  #配置数据源具体内容，包含连接池，驱动，地址，用户名和密码
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
        username: root
        password: 123456
      m0:  #配置主数据源具体内容，包含连接池，驱动，地址，用户名和密码
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user_db?serverTimezone=GMT%2B8
        username: root
        password: 123456
      s0:  #配置从数据源具体内容，包含连接池，驱动，地址，用户名和密码
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3307/user_db?serverTimezone=GMT%2B8
        username: root
        password: 123456
    sharding:
        # 主库从库逻辑数据源定义ds0为user_db
        master-slave-rules:
          ds0:
            master-data-source-name: m0
            slave-data-source-names: s0
        # 默认的分库策略 按照user_id 奇数在1库，偶数在2库
        #        default-database-strategy:
        #          inline:
        #            sharding-column: user_id
        #            algorithm-expression: ds$->{id % 2 + 1}
        # 配置公共表
        broadcast-tables: t_dict
        tables:
          # 配置公共表id生成策略
          t_dict:
            key-generator:
              column: id
              type: SNOWFLAKE
          # 配置垂直分库
          t_user:
            actual-data-nodes: ds0.t_user  #t_user分表策略，固定分配至ds0的t_user真实表
            key-generator:
              column: id
              type: SNOWFLAKE
            table-strategy:
              inline:
                sharding-column: id
                algorithm-expression: t_user
          course:
            actual-data-nodes: ds$->{1..2}.course_$->{1..2}  #指定数据库分库分表情况，数据库里面表分布情况
          # 指定course表里面主键cid 生成策略  SNOWFLAKE
            key-generator:
              column: id
              type: SNOWFLAKE
          # 指定分片策略  约定cid值偶数添加到course_1表，如果cid是奇数添加到course_2表
            table-strategy:
              inline:
                sharding-column: id
                algorithm-expression: course_$->{id % 2 + 1}
          # 对于指定表进行的分库策略
            database-strategy:
              inline:
                sharding-column: user_id
                algorithm-expression: ds$->{user_id % 2 + 1}
    # 打开sql输出日志
    props:
      sql:
        show: true

  # 一个实体类对应两张表，覆盖
  main:
    allow-bean-definition-overriding: true
